{:rename-macros {}, :renames {}, :externs {window {addEventListener {}}, Error {}, require {}, self {}, setTimeout {}}, :use-macros {}, :excludes #{}, :name figwheel.client.socket, :imports nil, :requires {gobj goog.object, goog.object goog.object, utils figwheel.client.utils, figwheel.client.utils figwheel.client.utils, cljs.reader cljs.reader}, :cljs.spec/speced-vars [], :uses {read-string cljs.reader}, :defs {get-websocket-imp {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/figwheel/client/socket.cljs", :line 7, :column 7, :end-line 7, :end-column 24, :arglists (quote ([]))}, :name figwheel.client.socket/get-websocket-imp, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/socket.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, message-history-atom {:name figwheel.client.socket/message-history-atom, :file "resources/public/js/compiled/out/figwheel/client/socket.cljs", :line 43, :column 1, :end-line 43, :end-column 30, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/figwheel/client/socket.cljs", :line 43, :column 10, :end-line 43, :end-column 30}, :tag any}, socket-atom {:name figwheel.client.socket/socket-atom, :file "resources/public/js/compiled/out/figwheel/client/socket.cljs", :line 45, :column 1, :end-line 45, :end-column 21, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/figwheel/client/socket.cljs", :line 45, :column 10, :end-line 45, :end-column 21}, :tag any}, send! {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/figwheel/client/socket.cljs", :line 47, :column 7, :end-line 47, :end-column 12, :arglists (quote ([msg])), :doc "Send a end message to the server."}, :name figwheel.client.socket/send!, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/socket.cljs", :end-column 12, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :doc "Send a end message to the server."}, close! {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/figwheel/client/socket.cljs", :line 53, :column 7, :end-line 53, :end-column 13, :arglists (quote ([]))}, :name figwheel.client.socket/close!, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/socket.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, handle-incoming-message {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/figwheel/client/socket.cljs", :line 57, :column 7, :end-line 57, :end-column 30, :arglists (quote ([msg]))}, :name figwheel.client.socket/handle-incoming-message, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/socket.cljs", :end-column 30, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg]))}, open {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/figwheel/client/socket.cljs", :line 66, :column 7, :end-line 66, :end-column 11, :arglists (quote ([{:keys [retry-count retried-count websocket-url build-id], :as opts}]))}, :name figwheel.client.socket/open, :variadic false, :file "resources/public/js/compiled/out/figwheel/client/socket.cljs", :end-column 11, :method-params ([p__38426]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [retry-count retried-count websocket-url build-id], :as opts}]))}}, :cljs.spec/registry-ref [], :require-macros {cljs.reader cljs.reader}, :cljs.analyzer/constants {:seen #{:ping :retried-count :else :ns handle-incoming-message :name figwheel.client.socket/handle-incoming-message :file :end-column :debug :column :build-id :line msg :websocket-url :end-line :msg-name :arglists figwheel.client.socket :doc :retry-count :test}, :order [:else :msg-name :ping :retry-count :retried-count :websocket-url :build-id :debug figwheel.client.socket/handle-incoming-message :ns :name :file :end-column :column :line :end-line :arglists :doc :test figwheel.client.socket handle-incoming-message msg]}, :doc nil}