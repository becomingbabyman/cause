{:rename-macros {}, :renames {}, :externs {RegExp {}, Error {}}, :use-macros {}, :excludes #{reverse replace}, :name clojure.string, :imports {StringBuffer goog.string.StringBuffer}, :requires {gstring goog.string, goog.string goog.string, StringBuffer goog.string.StringBuffer}, :cljs.spec/speced-vars [], :uses nil, :defs {ends-with? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 252, :column 16, :end-line 252, :end-column 26, :tag boolean, :arglists (quote ([s substr])), :doc "True if s ends with substr."}, :name clojure.string/ends-with?, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 26, :method-params ([s substr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :ret-tag boolean, :end-line 252, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([s substr])), :doc "True if s ends with substr."}, seq-reverse {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 14, :column 8, :end-line 14, :end-column 19, :private true, :arglists (quote ([coll]))}, :private true, :name clojure.string/seq-reverse, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 19, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, replace-with {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 36, :column 8, :end-line 36, :end-column 20, :private true, :arglists (quote ([f]))}, :private true, :name clojure.string/replace-with, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 20, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, capitalize {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 100, :column 7, :end-line 100, :end-column 17, :arglists (quote ([s])), :doc "Converts first character of the string to upper-case, all other\n  characters to lower-case."}, :name clojure.string/capitalize, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts first character of the string to upper-case, all other\n  characters to lower-case."}, reverse {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 21, :column 7, :end-line 21, :end-column 14, :arglists (quote ([s])), :doc "Returns s with its characters reversed."}, :name clojure.string/reverse, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns s with its characters reversed."}, join {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 71, :column 7, :end-line 71, :end-column 11, :arglists (quote ([coll] [separator coll])), :doc "Returns a string of all elements in coll, as returned by (seq coll),\n  separated by an optional separator.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [separator coll]), :arglists ([coll] [separator coll]), :arglists-meta (nil nil)}}, :name clojure.string/join, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [separator coll]), :arglists ([coll] [separator coll]), :arglists-meta (nil nil)}, :method-params ([coll] [separator coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [separator coll]), :doc "Returns a string of all elements in coll, as returned by (seq coll),\n  separated by an optional separator."}, replace-first {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 62, :column 7, :end-line 62, :end-column 20, :arglists (quote ([s match replacement])), :doc "Replaces the first instance of match with replacement in s.\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match)."}, :name clojure.string/replace-first, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 20, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces the first instance of match with replacement in s.\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match)."}, starts-with? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 247, :column 16, :end-line 247, :end-column 28, :tag boolean, :arglists (quote ([s substr])), :doc "True if s starts with substr."}, :name clojure.string/starts-with?, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 28, :method-params ([s substr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :ret-tag boolean, :end-line 247, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([s substr])), :doc "True if s starts with substr."}, escape {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 200, :column 7, :end-line 200, :end-column 13, :arglists (quote ([s cmap])), :doc "Return a new string, using cmap to escape each character ch\n   from s as follows:\n\n   If (cmap ch) is nil, append ch to the new string.\n   If (cmap ch) is non-nil, append (str (cmap ch)) instead."}, :name clojure.string/escape, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 13, :method-params ([s cmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s cmap])), :doc "Return a new string, using cmap to escape each character ch\n   from s as follows:\n\n   If (cmap ch) is nil, append ch to the new string.\n   If (cmap ch) is non-nil, append (str (cmap ch)) instead."}, replace-all {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 27, :column 8, :end-line 27, :end-column 19, :private true, :arglists (quote ([s re replacement]))}, :private true, :name clojure.string/replace-all, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 19, :method-params ([s re replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s re replacement]))}, discard-trailing-if-needed {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 122, :column 8, :end-line 122, :end-column 34, :private true, :arglists (quote ([limit v]))}, :private true, :name clojure.string/discard-trailing-if-needed, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 34, :method-params ([limit v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([limit v]))}, last-index-of {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 233, :column 7, :end-line 233, :end-column 20, :arglists (quote ([s value] [s value from-index])), :doc "Return last index of value (string or char) in s, optionally\n  searching backward from from-index or nil if not found.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s value] [s value from-index]), :arglists ([s value] [s value from-index]), :arglists-meta (nil nil)}}, :name clojure.string/last-index-of, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s value] [s value from-index]), :arglists ([s value] [s value from-index]), :arglists-meta (nil nil)}, :method-params ([s value] [s value from-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 3, :fn-var true, :arglists ([s value] [s value from-index]), :doc "Return last index of value (string or char) in s, optionally\n  searching backward from from-index or nil if not found."}, pop-last-while-empty {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 115, :column 8, :end-line 115, :end-column 28, :private true, :arglists (quote ([v]))}, :private true, :name clojure.string/pop-last-while-empty, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 28, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, includes? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 257, :column 16, :end-line 257, :end-column 25, :tag boolean, :arglists (quote ([s substr])), :doc "True if s includes substr."}, :name clojure.string/includes?, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 25, :method-params ([s substr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :ret-tag boolean, :end-line 257, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([s substr])), :doc "True if s includes substr."}, replace {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 44, :column 7, :end-line 44, :end-column 14, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s.\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match)."}, :name clojure.string/replace, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 14, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s.\n   match/replacement can be:\n\n   string / string\n   pattern / (string or function of match)."}, split-lines {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 162, :column 7, :end-line 162, :end-column 18, :arglists (quote ([s])), :doc "Splits s on \n or \r\n."}, :name clojure.string/split-lines, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Splits s on \n or \r\n."}, lower-case {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 95, :column 7, :end-line 95, :end-column 17, :arglists (quote ([s])), :doc "Converts string to all lower-case."}, :name clojure.string/lower-case, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to all lower-case."}, trim-newline {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 182, :column 7, :end-line 182, :end-column 19, :arglists (quote ([s])), :doc "Removes all trailing newline \\n or return \\r characters from\n  string.  Similar to Perl's chomp."}, :name clojure.string/trim-newline, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Removes all trailing newline \\n or return \\r characters from\n  string.  Similar to Perl's chomp."}, upper-case {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 90, :column 7, :end-line 90, :end-column 17, :arglists (quote ([s])), :doc "Converts string to all upper-case."}, :name clojure.string/upper-case, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to all upper-case."}, split {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 138, :column 7, :end-line 138, :end-column 12, :arglists (quote ([s re] [s re limit])), :doc "Splits string on a regular expression. Optional argument limit is\n  the maximum number of splits. Not lazy. Returns vector of the splits.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s re] [s re limit]), :arglists ([s re] [s re limit]), :arglists-meta (nil nil)}}, :name clojure.string/split, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s re] [s re limit]), :arglists ([s re] [s re limit]), :arglists-meta (nil nil)}, :method-params ([s re] [s re limit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 3, :fn-var true, :arglists ([s re] [s re limit]), :doc "Splits string on a regular expression. Optional argument limit is\n  the maximum number of splits. Not lazy. Returns vector of the splits."}, trimr {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 177, :column 7, :end-line 177, :end-column 12, :arglists (quote ([s])), :doc "Removes whitespace from the right side of string."}, :name clojure.string/trimr, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Removes whitespace from the right side of string."}, index-of {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 219, :column 7, :end-line 219, :end-column 15, :arglists (quote ([s value] [s value from-index])), :doc "Return index of value (string or char) in s, optionally searching\n  forward from from-index or nil if not found.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s value] [s value from-index]), :arglists ([s value] [s value from-index]), :arglists-meta (nil nil)}}, :name clojure.string/index-of, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s value] [s value from-index]), :arglists ([s value] [s value from-index]), :arglists-meta (nil nil)}, :method-params ([s value] [s value from-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 3, :fn-var true, :arglists ([s value] [s value from-index]), :doc "Return index of value (string or char) in s, optionally searching\n  forward from from-index or nil if not found."}, trim {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 167, :column 7, :end-line 167, :end-column 11, :arglists (quote ([s])), :doc "Removes whitespace from both ends of string."}, :name clojure.string/trim, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Removes whitespace from both ends of string."}, triml {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 172, :column 7, :end-line 172, :end-column 12, :arglists (quote ([s])), :doc "Removes whitespace from the left side of string."}, :name clojure.string/triml, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Removes whitespace from the left side of string."}, blank? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 195, :column 16, :end-line 195, :end-column 22, :tag boolean, :arglists (quote ([s])), :doc "True is s is nil, empty, or contains only whitespace."}, :name clojure.string/blank?, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :ret-tag boolean, :end-line 195, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([s])), :doc "True is s is nil, empty, or contains only whitespace."}, re-surrogate-pair {:name clojure.string/re-surrogate-pair, :file "resources/public/js/compiled/out/clojure/string.cljs", :line 18, :column 1, :end-line 18, :end-column 33, :private true, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 18, :column 16, :end-line 18, :end-column 33, :private true}, :tag js/RegExp}, split-with-empty-regex {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/clojure/string.cljs", :line 128, :column 8, :end-line 128, :end-column 30, :private true, :arglists (quote ([s limit]))}, :private true, :name clojure.string/split-with-empty-regex, :variadic false, :file "resources/public/js/compiled/out/clojure/string.cljs", :end-column 30, :method-params ([s limit]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s limit]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}