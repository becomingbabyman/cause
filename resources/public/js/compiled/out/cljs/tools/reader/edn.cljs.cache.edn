{:rename-macros {}, :renames {}, :externs {Error {}, String {fromCharCode {}}, parseInt {}, Number {NaN {}, NEGATIVE_INFINITY {}, POSITIVE_INFINITY {}}}, :use-macros {}, :excludes #{char read default-data-readers read-string}, :name cljs.tools.reader.edn, :imports {StringBuffer goog.string.StringBuffer}, :requires {err cljs.tools.reader.impl.errors, cljs.tools.reader.impl.errors cljs.tools.reader.impl.errors, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, cljs.tools.reader.impl.utils cljs.tools.reader.impl.utils, cljs.tools.reader.impl.commons cljs.tools.reader.impl.commons, cljs.tools.reader cljs.tools.reader, gstring goog.string, goog.string goog.string, StringBuffer goog.string.StringBuffer}, :cljs.spec/speced-vars [], :uses {match-number cljs.tools.reader.impl.commons, whitespace? cljs.tools.reader.impl.utils, read-comment cljs.tools.reader.impl.commons, char-code cljs.tools.reader, char cljs.tools.reader.impl.utils, numeric? cljs.tools.reader.impl.utils, unread cljs.tools.reader.reader-types, peek-char cljs.tools.reader.reader-types, parse-symbol cljs.tools.reader.impl.commons, second' cljs.tools.reader.impl.utils, desugar-meta cljs.tools.reader.impl.utils, default-data-readers cljs.tools.reader, number-literal? cljs.tools.reader.impl.commons, read-past cljs.tools.reader.impl.commons, indexing-reader? cljs.tools.reader.reader-types, read-char cljs.tools.reader.reader-types, get-column-number cljs.tools.reader.reader-types, ex-info? cljs.tools.reader.impl.utils, get-file-name cljs.tools.reader.reader-types, throwing-reader cljs.tools.reader.impl.commons, string-push-back-reader cljs.tools.reader.reader-types, namespace-keys cljs.tools.reader.impl.utils, get-line-number cljs.tools.reader.reader-types}, :defs {read-symbolic-value {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 326, :column 8, :end-line 326, :end-column 27, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-symbolic-value, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 27, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 326, :end-line 326, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-tagged {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 364, :column 8, :end-line 364, :end-column 19, :private true, :arglists (quote ([rdr initch opts]))}, :private true, :name cljs.tools.reader.edn/read-tagged, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 19, :method-params ([rdr initch opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 364, :end-line 364, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr initch opts]))}, starting-line-col-info {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 161, :column 17, :end-line 161, :end-column 39, :private true, :arglists (quote ([rdr]))}, :private true, :name cljs.tools.reader.edn/starting-line-col-info, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 39, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr]))}, wrapping-reader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 281, :column 8, :end-line 281, :end-column 23, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.tools.reader.edn/wrapping-reader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 23, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, read-meta {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 286, :column 8, :end-line 286, :end-column 17, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-meta, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 17, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-unicode-char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 85, :column 8, :end-line 85, :end-column 25, :private true, :arglists (quote ([token offset length base] [rdr initch base length exact?])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([token offset length base] [rdr initch base length exact?]), :arglists ([token offset length base] [rdr initch base length exact?]), :arglists-meta (nil nil)}}, :private true, :name cljs.tools.reader.edn/read-unicode-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([token offset length base] [rdr initch base length exact?]), :arglists ([token offset length base] [rdr initch base length exact?]), :arglists-meta (nil nil)}, :method-params ([token offset length base] [rdr initch base length exact?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 5, :fn-var true, :arglists ([token offset length base] [rdr initch base length exact?])}, read-unmatched-delimiter {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 77, :column 8, :end-line 77, :end-column 32, :private true, :arglists (quote ([rdr ch opts]))}, :private true, :name cljs.tools.reader.edn/read-unmatched-delimiter, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 32, :method-params ([rdr ch opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr ch opts]))}, not-constituent? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 37, :column 17, :end-line 37, :end-column 33, :tag boolean, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader.edn/not-constituent?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 33, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :ret-tag boolean, :end-line 37, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ch]))}, read {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 380, :column 7, :end-line 380, :end-column 11, :arglists (quote ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts])), :doc "Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   clojure.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :arglists ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :arglists-meta (nil nil nil)}}, :name cljs.tools.reader.edn/read, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :arglists ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :arglists-meta (nil nil nil)}, :method-params ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 380, :end-line 380, :max-fixed-arity 4, :fn-var true, :arglists ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :doc "Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   clojure.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value."}, read-set {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 296, :column 8, :end-line 296, :end-column 16, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-set, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 16, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-symbol {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 251, :column 8, :end-line 251, :end-column 19, :private true, :arglists (quote ([rdr initch]))}, :private true, :name cljs.tools.reader.edn/read-symbol, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 19, :method-params ([rdr initch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr initch]))}, read-map {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 193, :column 8, :end-line 193, :end-column 16, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-map, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 16, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, macros {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 337, :column 8, :end-line 337, :end-column 14, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader.edn/macros, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 14, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 337, :end-line 337, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, read-namespaced-map {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 309, :column 8, :end-line 309, :end-column 27, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-namespaced-map, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 27, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-list {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 181, :column 8, :end-line 181, :end-column 17, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-list, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 17, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, dispatch-macros {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 353, :column 8, :end-line 353, :end-column 23, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader.edn/dispatch-macros, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 23, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, read-delimited {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 165, :column 8, :end-line 165, :end-column 22, :private true, :arglists (quote ([kind delim rdr opts]))}, :private true, :name cljs.tools.reader.edn/read-delimited, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 22, :method-params ([kind delim rdr opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 4, :fn-var true, :arglists (quote ([kind delim rdr opts]))}, read-token {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 42, :column 8, :end-line 42, :end-column 18, :private true, :arglists (quote ([rdr kind initch] [rdr kind initch validate-leading?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([rdr kind initch] [rdr kind initch validate-leading?]), :arglists ([rdr kind initch] [rdr kind initch validate-leading?]), :arglists-meta (nil nil)}}, :private true, :name cljs.tools.reader.edn/read-token, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([rdr kind initch] [rdr kind initch validate-leading?]), :arglists ([rdr kind initch] [rdr kind initch validate-leading?]), :arglists-meta (nil nil)}, :method-params ([rdr kind initch] [rdr kind initch validate-leading?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 4, :fn-var true, :arglists ([rdr kind initch] [rdr kind initch validate-leading?])}, upper-limit {:meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 117, :column 24, :end-line 117, :end-column 35, :const true, :private true}, :private true, :name cljs.tools.reader.edn/upper-limit, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 35, :column 1, :const true, :line 117, :end-line 117, :tag any}, read-dispatch {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 67, :column 8, :end-line 67, :end-column 21, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-dispatch, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 21, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-string {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 437, :column 7, :end-line 437, :end-column 18, :arglists (quote ([s] [opts s])), :doc "Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per clojure.tools.reader.edn/read", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [opts s]), :arglists ([s] [opts s]), :arglists-meta (nil nil)}}, :name cljs.tools.reader.edn/read-string, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [opts s]), :arglists ([s] [opts s]), :arglists-meta (nil nil)}, :method-params ([s] [opts s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 437, :end-line 437, :max-fixed-arity 2, :fn-var true, :arglists ([s] [opts s]), :doc "Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per clojure.tools.reader.edn/read"}, escape-char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 219, :column 8, :end-line 219, :end-column 19, :private true, :arglists (quote ([sb rdr]))}, :private true, :name cljs.tools.reader.edn/escape-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 19, :method-params ([sb rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sb rdr]))}, read-char* {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 120, :column 8, :end-line 120, :end-column 18, :private true, :arglists (quote ([rdr backslash opts]))}, :private true, :name cljs.tools.reader.edn/read-char*, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 18, :method-params ([rdr backslash opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr backslash opts]))}, read-string* {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 240, :column 8, :end-line 240, :end-column 20, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-string*, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 20, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, macro-terminating? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 31, :column 17, :end-line 31, :end-column 35, :tag boolean, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader.edn/macro-terminating?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 35, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :ret-tag boolean, :end-line 31, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ch]))}, lower-limit {:meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 118, :column 24, :end-line 118, :end-column 35, :const true, :private true}, :private true, :name cljs.tools.reader.edn/lower-limit, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 35, :column 1, :const true, :line 118, :end-line 118, :tag any}, read-keyword {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 266, :column 8, :end-line 266, :end-column 20, :private true, :arglists (quote ([reader initch opts]))}, :private true, :name cljs.tools.reader.edn/read-keyword, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 20, :method-params ([reader initch opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 3, :fn-var true, :arglists (quote ([reader initch opts]))}, read-discard {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 304, :column 8, :end-line 304, :end-column 20, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-discard, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 20, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-vector {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 188, :column 8, :end-line 188, :end-column 19, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-vector, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 19, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-number {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 208, :column 8, :end-line 208, :end-column 19, :private true, :arglists (quote ([rdr initch opts]))}, :private true, :name cljs.tools.reader.edn/read-number, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 19, :method-params ([rdr initch opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr initch opts]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:namespaced-map :reader-exception :else :default :symbol NaN :file :readers :type Inf :string :vector :column :line :list :keyword / -Inf :set :eof :character :map}, :order [:else :character :list :vector :map :string :symbol / :keyword :set :namespaced-map NaN -Inf Inf :readers :default :eof :reader-exception :type :line :column :file]}, :doc "An EDN reader in clojure"}