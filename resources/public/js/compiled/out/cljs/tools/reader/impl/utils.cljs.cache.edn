{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{char}, :name cljs.tools.reader.impl.utils, :imports nil, :requires {string clojure.string, clojure.string clojure.string, gstring goog.string, goog.string goog.string}, :cljs.spec/speced-vars [], :uses nil, :defs {reader-conditional {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 29, :column 7, :end-line 29, :end-column 25, :arglists (quote ([form splicing?])), :doc "Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing."}, :name cljs.tools.reader.impl.utils/reader-conditional, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 25, :method-params ([form splicing?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form splicing?])), :doc "Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing."}, whitespace? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 43, :column 16, :end-line 43, :end-column 27, :tag boolean, :arglists (quote ([ch])), :doc "Checks whether a given character is whitespace"}, :name cljs.tools.reader.impl.utils/whitespace?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 27, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :ret-tag boolean, :end-line 43, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ch])), :doc "Checks whether a given character is whitespace"}, last-id {:name cljs.tools.reader.impl.utils/last-id, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 73, :column 1, :end-line 73, :end-column 13, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 73, :column 6, :end-line 73, :end-column 13}, :tag any}, char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 15, :column 7, :end-line 15, :end-column 11, :arglists (quote ([x]))}, :name cljs.tools.reader.impl.utils/char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, numeric? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 51, :column 16, :end-line 51, :end-column 24, :tag boolean, :arglists (quote ([ch])), :doc "Checks whether a given character is numeric"}, :name cljs.tools.reader.impl.utils/numeric?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 24, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :ret-tag boolean, :end-line 51, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ch])), :doc "Checks whether a given character is numeric"}, ReaderConditional {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.tools.reader.impl.utils/ReaderConditional, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 29, :type true, :column 12, :internal-ctor true, :line 22, :record true, :end-line 22, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, second' {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 96, :column 7, :end-line 96, :end-column 14, :arglists (quote ([[a b]]))}, :name cljs.tools.reader.impl.utils/second', :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 14, :method-params ([p__36386]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[a b]]))}, desugar-meta {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 64, :column 7, :end-line 64, :end-column 19, :arglists (quote ([f])), :doc "Resolves syntactical sugar in metadata"}, :name cljs.tools.reader.impl.utils/desugar-meta, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 19, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Resolves syntactical sugar in metadata"}, ->ReaderConditional {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 22, :column 12, :end-line 22, :end-column 29, :internal-ctor true, :factory :positional, :arglists (quote ([splicing? form]))}, :name cljs.tools.reader.impl.utils/->ReaderConditional, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 29, :method-params ([splicing? form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([splicing? form]))}, next-id {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 75, :column 7, :end-line 75, :end-column 14, :arglists (quote ([]))}, :name cljs.tools.reader.impl.utils/next-id, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, map->ReaderConditional {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 22, :column 12, :end-line 22, :end-column 29, :internal-ctor true, :factory :map, :arglists (quote ([G__36369]))}, :name cljs.tools.reader.impl.utils/map->ReaderConditional, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 29, :method-params ([G__36369]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__36369]))}, ex-info? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 19, :column 16, :end-line 19, :end-column 24, :tag boolean, :arglists (quote ([ex]))}, :name cljs.tools.reader.impl.utils/ex-info?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 24, :method-params ([ex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :ret-tag boolean, :end-line 19, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ex]))}, reader-conditional? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 24, :column 16, :end-line 24, :end-column 35, :tag boolean, :arglists (quote ([value])), :doc "Return true if the value is the data representation of a reader conditional"}, :name cljs.tools.reader.impl.utils/reader-conditional?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 35, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :ret-tag boolean, :end-line 24, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([value])), :doc "Return true if the value is the data representation of a reader conditional"}, newline? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 57, :column 16, :end-line 57, :end-column 24, :tag boolean, :arglists (quote ([c])), :doc "Checks whether the character is a newline"}, :name cljs.tools.reader.impl.utils/newline?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 24, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :ret-tag boolean, :end-line 57, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([c])), :doc "Checks whether the character is a newline"}, namespace-keys {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 79, :column 7, :end-line 79, :end-column 21, :arglists (quote ([ns keys]))}, :name cljs.tools.reader.impl.utils/namespace-keys, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :end-column 21, :method-params ([ns keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ns keys]))}, ws-rx {:name cljs.tools.reader.impl.utils/ws-rx, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 41, :column 1, :end-line 41, :end-column 11, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/utils.cljs", :line 41, :column 6, :end-line 41, :end-column 11}, :tag any}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{form :else :splicing? splicing? :form :tag}, :order [:splicing? :form splicing? form :tag :else]}, :doc nil}