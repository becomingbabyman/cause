{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{char read-line}, :name cljs.tools.reader.reader-types, :imports {StringBuffer goog.string.StringBuffer}, :requires {cljs.tools.reader.impl.utils cljs.tools.reader.impl.utils, goog.string goog.string, StringBuffer goog.string.StringBuffer}, :cljs.spec/speced-vars [], :uses {whitespace? cljs.tools.reader.impl.utils, char cljs.tools.reader.impl.utils, newline? cljs.tools.reader.impl.utils}, :defs {indexing-push-back-reader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 227, :column 7, :end-line 227, :end-column 32, :arglists (quote ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name])), :doc "Creates an IndexingPushbackReader from a given string or PushbackReader", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :arglists ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :arglists-meta (nil nil nil)}}, :name cljs.tools.reader.reader-types/indexing-push-back-reader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 32, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :arglists ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :arglists-meta (nil nil nil)}, :method-params ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 3, :fn-var true, :arglists ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :doc "Creates an IndexingPushbackReader from a given string or PushbackReader"}, log-source* {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 272, :column 7, :end-line 272, :end-column 18, :arglists (quote ([reader f]))}, :name cljs.tools.reader.reader-types/log-source*, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 18, :method-params ([reader f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reader f]))}, merge-meta {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 139, :column 7, :end-line 139, :end-column 17, :arglists (quote ([obj m])), :doc "Returns an object of the same type and value as `obj`, with its\nmetadata merged over `m`."}, :name cljs.tools.reader.reader-types/merge-meta, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 17, :method-params ([obj m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj m])), :doc "Returns an object of the same type and value as `obj`, with its\nmetadata merged over `m`."}, PushbackReader {:num-fields 4, :protocols #{cljs.tools.reader.reader-types/Reader cljs.tools.reader.reader-types/IPushbackReader}, :name cljs.tools.reader.reader-types/PushbackReader, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 24, :type true, :column 10, :line 71, :record false, :end-line 71, :skip-protocol-flag nil}, ->StringReader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 43, :column 10, :end-line 43, :end-column 22, :protocols #{cljs.tools.reader.reader-types/Reader}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([s s-len s-pos]))}, :protocols #{cljs.tools.reader.reader-types/Reader}, :name cljs.tools.reader.reader-types/->StringReader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 22, :method-params ([s s-len s-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s s-len s-pos])), :skip-protocol-flag nil}, normalize-newline {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 93, :column 8, :end-line 93, :end-column 25, :private true, :arglists (quote ([rdr ch]))}, :private true, :name cljs.tools.reader.reader-types/normalize-newline, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 25, :method-params ([rdr ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr ch]))}, peek-source-log {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 146, :column 8, :end-line 146, :end-column 23, :private true, :arglists (quote ([frames])), :doc "Returns a string containing the contents of the top most source\nlogging frame."}, :private true, :name cljs.tools.reader.reader-types/peek-source-log, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 23, :method-params ([frames]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([frames])), :doc "Returns a string containing the contents of the top most source\nlogging frame."}, IndexingPushbackReader {:num-fields 7, :protocols #{cljs.tools.reader.reader-types/IndexingReader cljs.tools.reader.reader-types/Reader cljs.tools.reader.reader-types/IPushbackReader}, :name cljs.tools.reader.reader-types/IndexingPushbackReader, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 32, :type true, :column 10, :line 102, :record false, :end-line 102, :skip-protocol-flag nil}, StringReader {:num-fields 3, :protocols #{cljs.tools.reader.reader-types/Reader}, :name cljs.tools.reader.reader-types/StringReader, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 22, :type true, :column 10, :line 43, :record false, :end-line 43, :skip-protocol-flag nil}, Reader {:meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 21, :column 14, :end-line 21, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {read-char [[reader]], peek-char [[reader]]}}}, :protocol-symbol true, :name cljs.tools.reader.reader-types/Reader, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 20, :column 1, :line 21, :protocol-info {:methods {read-char [[reader]], peek-char [[reader]]}}, :info nil, :end-line 21, :tag any, :impls #{cljs.tools.reader.reader-types/SourceLoggingPushbackReader cljs.tools.reader.reader-types/IndexingPushbackReader cljs.tools.reader.reader-types/NodeReadableReader cljs.tools.reader.reader-types/StringReader cljs.tools.reader.reader-types/PushbackReader}, :doc nil, :jsdoc ("@interface")}, source-logging-push-back-reader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 237, :column 7, :end-line 237, :end-column 38, :arglists (quote ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name])), :doc "Creates a SourceLoggingPushbackReader from a given string or PushbackReader", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :arglists ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :arglists-meta (nil nil nil)}}, :name cljs.tools.reader.reader-types/source-logging-push-back-reader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 38, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :arglists ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :arglists-meta (nil nil nil)}, :method-params ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 3, :fn-var true, :arglists ([s-or-rdr] [s-or-rdr buf-len] [s-or-rdr buf-len file-name]), :doc "Creates a SourceLoggingPushbackReader from a given string or PushbackReader"}, unread {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 28, :column 4, :end-line 28, :end-column 10, :protocol cljs.tools.reader.reader-types/IPushbackReader, :doc "Pushes back a single character on to the stream", :arglists (quote ([reader ch]))}, :protocol cljs.tools.reader.reader-types/IPushbackReader, :name cljs.tools.reader.reader-types/unread, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 10, :method-params ([reader ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reader ch])), :doc "Pushes back a single character on to the stream"}, peek-char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 24, :column 4, :end-line 24, :end-column 13, :protocol cljs.tools.reader.reader-types/Reader, :doc "Returns the next char from the Reader without removing it from the reader stream", :arglists (quote ([reader]))}, :protocol cljs.tools.reader.reader-types/Reader, :name cljs.tools.reader.reader-types/peek-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 13, :method-params ([reader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reader])), :doc "Returns the next char from the Reader without removing it from the reader stream"}, IPushbackReader {:meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 27, :column 14, :end-line 27, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {unread [[reader ch]]}}}, :protocol-symbol true, :name cljs.tools.reader.reader-types/IPushbackReader, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 29, :column 1, :line 27, :protocol-info {:methods {unread [[reader ch]]}}, :info nil, :end-line 27, :tag any, :impls #{cljs.tools.reader.reader-types/SourceLoggingPushbackReader cljs.tools.reader.reader-types/IndexingPushbackReader cljs.tools.reader.reader-types/PushbackReader}, :doc nil, :jsdoc ("@interface")}, ->NodeReadableReader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 55, :column 10, :end-line 55, :end-column 28, :protocols #{cljs.tools.reader.reader-types/Reader}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([readable buf]))}, :protocols #{cljs.tools.reader.reader-types/Reader}, :name cljs.tools.reader.reader-types/->NodeReadableReader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 28, :method-params ([readable buf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([readable buf])), :skip-protocol-flag nil}, indexing-reader? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 207, :column 7, :end-line 207, :end-column 23, :arglists (quote ([rdr])), :doc "Returns true if the reader satisfies IndexingReader"}, :name cljs.tools.reader.reader-types/indexing-reader?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 23, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr])), :doc "Returns true if the reader satisfies IndexingReader"}, string-reader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 212, :column 7, :end-line 212, :end-column 20, :arglists (quote ([s])), :doc "Creates a StringReader from a given string"}, :name cljs.tools.reader.reader-types/string-reader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Creates a StringReader from a given string"}, read-char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 22, :column 4, :end-line 22, :end-column 13, :protocol cljs.tools.reader.reader-types/Reader, :doc "Returns the next char from the Reader, nil if the end of stream has been reached", :arglists (quote ([reader]))}, :protocol cljs.tools.reader.reader-types/Reader, :name cljs.tools.reader.reader-types/read-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 13, :method-params ([reader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reader])), :doc "Returns the next char from the Reader, nil if the end of stream has been reached"}, get-column-number {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 34, :column 4, :end-line 34, :end-column 21, :protocol cljs.tools.reader.reader-types/IndexingReader, :doc "Returns the column number of the next character to be read from the stream", :arglists (quote ([reader]))}, :protocol cljs.tools.reader.reader-types/IndexingReader, :name cljs.tools.reader.reader-types/get-column-number, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 21, :method-params ([reader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reader])), :doc "Returns the column number of the next character to be read from the stream"}, get-file-name {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 36, :column 4, :end-line 36, :end-column 17, :protocol cljs.tools.reader.reader-types/IndexingReader, :doc "Returns the file name the reader is reading from, or nil", :arglists (quote ([reader]))}, :protocol cljs.tools.reader.reader-types/IndexingReader, :name cljs.tools.reader.reader-types/get-file-name, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 17, :method-params ([reader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reader])), :doc "Returns the file name the reader is reading from, or nil"}, read-line {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 254, :column 7, :end-line 254, :end-column 16, :arglists (quote ([rdr])), :doc "Reads a line from the reader or from *in* if no reader is specified"}, :name cljs.tools.reader.reader-types/read-line, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 16, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr])), :doc "Reads a line from the reader or from *in* if no reader is specified"}, ->PushbackReader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 71, :column 10, :end-line 71, :end-column 24, :protocols #{cljs.tools.reader.reader-types/Reader cljs.tools.reader.reader-types/IPushbackReader}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([rdr buf buf-len buf-pos]))}, :protocols #{cljs.tools.reader.reader-types/Reader cljs.tools.reader.reader-types/IPushbackReader}, :name cljs.tools.reader.reader-types/->PushbackReader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 24, :method-params ([rdr buf buf-len buf-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 71, :end-line 71, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr buf buf-len buf-pos])), :skip-protocol-flag nil}, log-source-char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 152, :column 8, :end-line 152, :end-column 23, :private true, :arglists (quote ([frames char])), :doc "Logs `char` to all currently active source logging frames."}, :private true, :name cljs.tools.reader.reader-types/log-source-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 23, :method-params ([frames char]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 2, :fn-var true, :arglists (quote ([frames char])), :doc "Logs `char` to all currently active source logging frames."}, string-push-back-reader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 217, :column 7, :end-line 217, :end-column 30, :arglists (quote ([s] [s buf-len])), :doc "Creates a PushbackReader from a given string", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s buf-len]), :arglists ([s] [s buf-len]), :arglists-meta (nil nil)}}, :name cljs.tools.reader.reader-types/string-push-back-reader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s buf-len]), :arglists ([s] [s buf-len]), :arglists-meta (nil nil)}, :method-params ([s] [s buf-len]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s buf-len]), :doc "Creates a PushbackReader from a given string"}, drop-last-logged-char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 158, :column 8, :end-line 158, :end-column 29, :private true, :arglists (quote ([frames])), :doc "Removes the last logged character from all currently active source\nlogging frames. Called when pushing a character back."}, :private true, :name cljs.tools.reader.reader-types/drop-last-logged-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 29, :method-params ([frames]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([frames])), :doc "Removes the last logged character from all currently active source\nlogging frames. Called when pushing a character back."}, ->SourceLoggingPushbackReader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 165, :column 10, :end-line 165, :end-column 37, :protocols #{cljs.tools.reader.reader-types/IndexingReader cljs.tools.reader.reader-types/Reader cljs.tools.reader.reader-types/IPushbackReader}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([rdr line column line-start? prev prev-column file-name frames]))}, :protocols #{cljs.tools.reader.reader-types/IndexingReader cljs.tools.reader.reader-types/Reader cljs.tools.reader.reader-types/IPushbackReader}, :name cljs.tools.reader.reader-types/->SourceLoggingPushbackReader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 37, :method-params ([rdr line column line-start? prev prev-column file-name frames]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 165, :end-line 165, :max-fixed-arity 8, :fn-var true, :arglists (quote ([rdr line column line-start? prev prev-column file-name frames])), :skip-protocol-flag nil}, line-start? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 266, :column 16, :end-line 266, :end-column 27, :tag boolean, :arglists (quote ([rdr])), :doc "Returns true if rdr is an IndexingReader and the current char starts a new line"}, :name cljs.tools.reader.reader-types/line-start?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 27, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :ret-tag boolean, :end-line 266, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([rdr])), :doc "Returns true if rdr is an IndexingReader and the current char starts a new line"}, source-logging-reader? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 262, :column 16, :end-line 262, :end-column 38, :tag boolean, :arglists (quote ([rdr]))}, :name cljs.tools.reader.reader-types/source-logging-reader?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 38, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :ret-tag boolean, :end-line 262, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([rdr]))}, IndexingReader {:meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 31, :column 14, :end-line 31, :end-column 28, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {get-line-number [[reader]], get-column-number [[reader]], get-file-name [[reader]]}}}, :protocol-symbol true, :name cljs.tools.reader.reader-types/IndexingReader, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 28, :column 1, :line 31, :protocol-info {:methods {get-line-number [[reader]], get-column-number [[reader]], get-file-name [[reader]]}}, :info nil, :end-line 31, :tag any, :impls #{cljs.tools.reader.reader-types/SourceLoggingPushbackReader cljs.tools.reader.reader-types/IndexingPushbackReader}, :doc nil, :jsdoc ("@interface")}, node-readable-push-back-reader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 224, :column 7, :end-line 224, :end-column 37, :arglists (quote ([readable]))}, :name cljs.tools.reader.reader-types/node-readable-push-back-reader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 37, :method-params ([readable]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([readable]))}, SourceLoggingPushbackReader {:num-fields 8, :protocols #{cljs.tools.reader.reader-types/IndexingReader cljs.tools.reader.reader-types/Reader cljs.tools.reader.reader-types/IPushbackReader}, :name cljs.tools.reader.reader-types/SourceLoggingPushbackReader, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 37, :type true, :column 10, :line 165, :record false, :end-line 165, :skip-protocol-flag nil}, get-line-number {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 32, :column 4, :end-line 32, :end-column 19, :protocol cljs.tools.reader.reader-types/IndexingReader, :doc "Returns the line number of the next character to be read from the stream", :arglists (quote ([reader]))}, :protocol cljs.tools.reader.reader-types/IndexingReader, :name cljs.tools.reader.reader-types/get-line-number, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 19, :method-params ([reader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reader])), :doc "Returns the line number of the next character to be read from the stream"}, NodeReadableReader {:num-fields 2, :protocols #{cljs.tools.reader.reader-types/Reader}, :name cljs.tools.reader.reader-types/NodeReadableReader, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 28, :type true, :column 10, :line 55, :record false, :end-line 55, :skip-protocol-flag nil}, ->IndexingPushbackReader {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :line 102, :column 10, :end-line 102, :end-column 32, :protocols #{cljs.tools.reader.reader-types/IndexingReader cljs.tools.reader.reader-types/Reader cljs.tools.reader.reader-types/IPushbackReader}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([rdr line column line-start? prev prev-column file-name]))}, :protocols #{cljs.tools.reader.reader-types/IndexingReader cljs.tools.reader.reader-types/Reader cljs.tools.reader.reader-types/IPushbackReader}, :name cljs.tools.reader.reader-types/->IndexingPushbackReader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/reader_types.cljs", :end-column 32, :method-params ([rdr line column line-start? prev prev-column file-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 102, :end-line 102, :max-fixed-arity 7, :fn-var true, :arglists (quote ([rdr line column line-start? prev prev-column file-name])), :skip-protocol-flag nil}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{s-pos prev-column :offset rdr buf :source readable frames not-native s column buf-pos :tag :mutable line-start? line s-len file-name prev buf-len :buffer}, :order [s s-len s-pos :mutable readable buf rdr :tag not-native buf-len buf-pos line column line-start? prev prev-column file-name :source :buffer :offset frames]}, :doc "Protocols and default Reader types implementation"}