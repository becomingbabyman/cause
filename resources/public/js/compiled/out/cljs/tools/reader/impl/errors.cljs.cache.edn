{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name cljs.tools.reader.impl.errors, :imports nil, :requires {types cljs.tools.reader.reader-types, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, s clojure.string, clojure.string clojure.string, i cljs.tools.reader.impl.inspect, cljs.tools.reader.impl.inspect cljs.tools.reader.impl.inspect}, :cljs.spec/speced-vars [], :uses nil, :defs {throw-bad-dispatch {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 114, :column 7, :end-line 114, :end-column 25, :arglists (quote ([rdr ch]))}, :name cljs.tools.reader.impl.errors/throw-bad-dispatch, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 25, :method-params ([rdr ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr ch]))}, throw-invalid-unicode-escape {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 95, :column 7, :end-line 95, :end-column 35, :arglists (quote ([rdr ch]))}, :name cljs.tools.reader.impl.errors/throw-invalid-unicode-escape, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 35, :method-params ([rdr ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr ch]))}, throw-dup-keys {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 243, :column 7, :end-line 243, :end-column 21, :arglists (quote ([rdr kind ks]))}, :name cljs.tools.reader.impl.errors/throw-dup-keys, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 21, :method-params ([rdr kind ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr kind ks]))}, throw-bad-ns {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 216, :column 7, :end-line 216, :end-column 19, :arglists (quote ([rdr ns-name]))}, :name cljs.tools.reader.impl.errors/throw-bad-ns, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 19, :method-params ([rdr ns-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr ns-name]))}, duplicate-keys-error {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 233, :column 8, :end-line 233, :end-column 28, :private true, :arglists (quote ([msg coll]))}, :private true, :name cljs.tools.reader.impl.errors/duplicate-keys-error, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 28, :method-params ([msg coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 2, :fn-var true, :arglists (quote ([msg coll]))}, throw-unknown-reader-tag {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 226, :column 7, :end-line 226, :end-column 31, :arglists (quote ([rdr tag]))}, :name cljs.tools.reader.impl.errors/throw-unknown-reader-tag, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 31, :method-params ([rdr tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr tag]))}, throw-eof-at-dispatch {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 111, :column 7, :end-line 111, :end-column 28, :arglists (quote ([rdr]))}, :name cljs.tools.reader.impl.errors/throw-eof-at-dispatch, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 28, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr]))}, throw-bad-metadata-target {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 198, :column 7, :end-line 198, :end-column 32, :arglists (quote ([rdr target]))}, :name cljs.tools.reader.impl.errors/throw-bad-metadata-target, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 32, :method-params ([rdr target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr target]))}, throw-invalid-number {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 80, :column 7, :end-line 80, :end-column 27, :arglists (quote ([rdr token]))}, :name cljs.tools.reader.impl.errors/throw-invalid-number, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 27, :method-params ([rdr token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr token]))}, reader-error {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 39, :column 7, :end-line 39, :end-column 19, :arglists (quote ([rdr & msgs])), :doc "Throws an ExceptionInfo with the given message.\n   If rdr is an IndexingReader, additional information about column and line number is provided", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(rdr msgs)], :arglists ([rdr & msgs]), :arglists-meta (nil)}}, :name cljs.tools.reader.impl.errors/reader-error, :variadic true, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(rdr msgs)], :arglists ([rdr & msgs]), :arglists-meta (nil)}, :method-params [(rdr msgs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists ([rdr & msgs]), :doc "Throws an ExceptionInfo with the given message.\n   If rdr is an IndexingReader, additional information about column and line number is provided"}, throw-invalid-unicode-literal {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 87, :column 7, :end-line 87, :end-column 36, :arglists (quote ([rdr token]))}, :name cljs.tools.reader.impl.errors/throw-invalid-unicode-literal, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 36, :method-params ([rdr token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr token]))}, throw-ns-map-no-map {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 213, :column 7, :end-line 213, :end-column 26, :arglists (quote ([rdr ns-name]))}, :name cljs.tools.reader.impl.errors/throw-ns-map-no-map, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 26, :method-params ([rdr ns-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr ns-name]))}, throw-unsupported-character {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 173, :column 7, :end-line 173, :end-column 34, :arglists (quote ([rdr token]))}, :name cljs.tools.reader.impl.errors/throw-unsupported-character, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 34, :method-params ([rdr token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr token]))}, throw-feature-not-keyword {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 206, :column 7, :end-line 206, :end-column 32, :arglists (quote ([rdr feature]))}, :name cljs.tools.reader.impl.errors/throw-feature-not-keyword, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 32, :method-params ([rdr feature]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr feature]))}, throw-eof-delimited {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 57, :column 7, :end-line 57, :end-column 26, :arglists (quote ([rdr kind column line] [rdr kind line column n])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([rdr kind column line] [rdr kind line column n]), :arglists ([rdr kind column line] [rdr kind line column n]), :arglists-meta (nil nil)}}, :name cljs.tools.reader.impl.errors/throw-eof-delimited, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([rdr kind column line] [rdr kind line column n]), :arglists ([rdr kind column line] [rdr kind line column n]), :arglists-meta (nil nil)}, :method-params ([rdr kind column line] [rdr kind line column n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 5, :fn-var true, :arglists ([rdr kind column line] [rdr kind line column n])}, throw-eof-in-character {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 180, :column 7, :end-line 180, :end-column 29, :arglists (quote ([rdr]))}, :name cljs.tools.reader.impl.errors/throw-eof-in-character, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 29, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr]))}, throw-bad-char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 108, :column 7, :end-line 108, :end-column 21, :arglists (quote ([rdr kind ch]))}, :name cljs.tools.reader.impl.errors/throw-bad-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 21, :method-params ([rdr kind ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr kind ch]))}, eof-error {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 51, :column 7, :end-line 51, :end-column 16, :arglists (quote ([rdr & msgs])), :doc "Throws an ExceptionInfo with the given message.\n   If rdr is an IndexingReader, additional information about column and line number is provided", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(rdr msgs)], :arglists ([rdr & msgs]), :arglists-meta (nil)}}, :name cljs.tools.reader.impl.errors/eof-error, :variadic true, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(rdr msgs)], :arglists ([rdr & msgs]), :arglists-meta (nil)}, :method-params [(rdr msgs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists ([rdr & msgs]), :doc "Throws an ExceptionInfo with the given message.\n   If rdr is an IndexingReader, additional information about column and line number is provided"}, throw-bad-metadata {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 191, :column 7, :end-line 191, :end-column 25, :arglists (quote ([rdr x]))}, :name cljs.tools.reader.impl.errors/throw-bad-metadata, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 25, :method-params ([rdr x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr x]))}, throw-eof-reading {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 120, :column 7, :end-line 120, :end-column 24, :arglists (quote ([rdr kind & start])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(rdr kind start)], :arglists ([rdr kind & start]), :arglists-meta (nil)}}, :name cljs.tools.reader.impl.errors/throw-eof-reading, :variadic true, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(rdr kind start)], :arglists ([rdr kind & start]), :arglists-meta (nil)}, :method-params [(rdr kind start)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists ([rdr kind & start])}, throw-eof-error {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 250, :column 7, :end-line 250, :end-column 22, :arglists (quote ([rdr line]))}, :name cljs.tools.reader.impl.errors/throw-eof-error, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 22, :method-params ([rdr line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :end-line 250, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr line]))}, illegal-arg-error {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 45, :column 7, :end-line 45, :end-column 24, :arglists (quote ([rdr & msgs])), :doc "Throws an ExceptionInfo with the given message.\n   If rdr is an IndexingReader, additional information about column and line number is provided", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(rdr msgs)], :arglists ([rdr & msgs]), :arglists-meta (nil)}}, :name cljs.tools.reader.impl.errors/illegal-arg-error, :variadic true, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(rdr msgs)], :arglists ([rdr & msgs]), :arglists-meta (nil)}, :method-params [(rdr msgs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists ([rdr & msgs]), :doc "Throws an ExceptionInfo with the given message.\n   If rdr is an IndexingReader, additional information about column and line number is provided"}, throw-invalid-octal-len {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 163, :column 7, :end-line 163, :end-column 30, :arglists (quote ([rdr token]))}, :name cljs.tools.reader.impl.errors/throw-invalid-octal-len, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 30, :method-params ([rdr token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr token]))}, throw-invalid-unicode-digit {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 143, :column 7, :end-line 143, :end-column 34, :arglists (quote ([rdr ch]))}, :name cljs.tools.reader.impl.errors/throw-invalid-unicode-digit, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 34, :method-params ([rdr ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr ch]))}, throw-invalid-unicode-digit-in-token {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 134, :column 7, :end-line 134, :end-column 43, :arglists (quote ([rdr ch token]))}, :name cljs.tools.reader.impl.errors/throw-invalid-unicode-digit-in-token, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 43, :method-params ([rdr ch token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr ch token]))}, throw-invalid-unicode-len {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 150, :column 7, :end-line 150, :end-column 32, :arglists (quote ([rdr actual expected]))}, :name cljs.tools.reader.impl.errors/throw-invalid-unicode-len, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 32, :method-params ([rdr actual expected]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr actual expected]))}, throw-single-colon {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 188, :column 7, :end-line 188, :end-column 25, :arglists (quote ([rdr]))}, :name cljs.tools.reader.impl.errors/throw-single-colon, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 25, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr]))}, throw-odd-map {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 70, :column 7, :end-line 70, :end-column 20, :arglists (quote ([rdr line col elements]))}, :name cljs.tools.reader.impl.errors/throw-odd-map, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 20, :method-params ([rdr line col elements]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr line col elements]))}, throw-bad-octal-number {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 170, :column 7, :end-line 170, :end-column 29, :arglists (quote ([rdr]))}, :name cljs.tools.reader.impl.errors/throw-bad-octal-number, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 29, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr]))}, throw-bad-reader-tag {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 219, :column 7, :end-line 219, :end-column 27, :arglists (quote ([rdr tag]))}, :name cljs.tools.reader.impl.errors/throw-bad-reader-tag, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 27, :method-params ([rdr tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr tag]))}, throw-unmatch-delimiter {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 117, :column 7, :end-line 117, :end-column 30, :arglists (quote ([rdr ch]))}, :name cljs.tools.reader.impl.errors/throw-unmatch-delimiter, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 30, :method-params ([rdr ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr ch]))}, throw-invalid-character-literal {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 160, :column 7, :end-line 160, :end-column 38, :arglists (quote ([rdr token]))}, :name cljs.tools.reader.impl.errors/throw-invalid-character-literal, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 38, :method-params ([rdr token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr token]))}, throw-invalid-unicode-char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 127, :column 7, :end-line 127, :end-column 33, :arglists (quote ([rdr token]))}, :name cljs.tools.reader.impl.errors/throw-invalid-unicode-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 33, :method-params ([rdr token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr token]))}, throw-bad-escape-char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 185, :column 7, :end-line 185, :end-column 28, :arglists (quote ([rdr ch]))}, :name cljs.tools.reader.impl.errors/throw-bad-escape-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 28, :method-params ([rdr ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr ch]))}, throw-no-dispatch {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 124, :column 7, :end-line 124, :end-column 24, :arglists (quote ([rdr ch]))}, :name cljs.tools.reader.impl.errors/throw-no-dispatch, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 24, :method-params ([rdr ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr ch]))}, throw-eof-at-start {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 105, :column 7, :end-line 105, :end-column 25, :arglists (quote ([rdr kind]))}, :name cljs.tools.reader.impl.errors/throw-eof-at-start, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 25, :method-params ([rdr kind]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr kind]))}, ex-details {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 14, :column 8, :end-line 14, :end-column 18, :private true, :arglists (quote ([rdr ex-type]))}, :private true, :name cljs.tools.reader.impl.errors/ex-details, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 18, :method-params ([rdr ex-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr ex-type]))}, throw-ex {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 26, :column 8, :end-line 26, :end-column 16, :private true, :arglists (quote ([rdr ex-type & msg])), :doc "Throw an ex-info error.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(rdr ex-type msg)], :arglists ([rdr ex-type & msg]), :arglists-meta (nil)}}, :private true, :name cljs.tools.reader.impl.errors/throw-ex, :variadic true, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(rdr ex-type msg)], :arglists ([rdr ex-type & msg]), :arglists-meta (nil)}, :method-params [(rdr ex-type msg)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists ([rdr ex-type & msg]), :doc "Throw an ex-info error."}, throw-invalid {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :line 102, :column 7, :end-line 102, :end-column 20, :arglists (quote ([rdr kind token]))}, :name cljs.tools.reader.impl.errors/throw-invalid, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/impl/errors.cljs", :end-column 20, :method-params ([rdr kind token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr kind token]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:ex-kind :reader-error :reader-exception :file :type :illegal-argument :line :col :eof}, :order [:type :ex-kind :reader-exception :file :line :col :reader-error :illegal-argument :eof]}, :doc nil}