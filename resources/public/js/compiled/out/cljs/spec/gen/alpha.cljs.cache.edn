{:rename-macros {}, :renames {}, :externs {Error {}, Date {}}, :use-macros {lazy-prims cljs.spec.gen.alpha, dynaload cljs.spec.gen.alpha, lazy-combinators cljs.spec.gen.alpha}, :excludes #{uuid set boolean map delay char cat double int symbol string vector not-empty list keyword hash-map}, :name cljs.spec.gen.alpha, :imports nil, :requires {c cljs.core, cljs.core cljs.core}, :cljs.spec/speced-vars [], :uses nil, :defs {uuid {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 75, :column 60, :end-line 75, :end-column 64, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/uuid", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/uuid, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 64, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/uuid"}, gen-for-pred {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 141, :column 7, :end-line 141, :end-column 19, :arglists (quote ([pred])), :doc "Given a predicate, returns a built-in generator if one exists."}, :name cljs.spec.gen.alpha/gen-for-pred, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 19, :method-params ([pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pred])), :doc "Given a predicate, returns a built-in generator if one exists."}, set {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 69, :column 47, :end-line 69, :end-column 50, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/set", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/set, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 50, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/set"}, one-of {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 70, :column 15, :end-line 70, :end-column 21, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/one-of", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/one-of, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/one-of"}, any-printable {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 73, :column 17, :end-line 73, :end-column 30, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/any-printable", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/any-printable, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/any-printable"}, vector-distinct {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 69, :column 58, :end-line 69, :end-column 73, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/vector-distinct", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/vector-distinct, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 73, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/vector-distinct"}, boolean {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 73, :column 31, :end-line 73, :end-column 38, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/boolean", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/boolean, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 38, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/boolean"}, string-alphanumeric {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 75, :column 23, :end-line 75, :end-column 42, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/string-alphanumeric", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/string-alphanumeric, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 42, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/string-alphanumeric"}, qualified? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 84, :column 17, :end-line 84, :end-column 27, :tag boolean, :private true, :arglists (quote ([ident]))}, :private true, :name cljs.spec.gen.alpha/qualified?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 27, :method-params ([ident]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :ret-tag boolean, :end-line 84, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ident]))}, map {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 69, :column 33, :end-line 69, :end-column 36, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/map", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/map, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 36, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/map"}, simple-type {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 74, :column 46, :end-line 74, :end-column 57, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/simple-type", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/simple-type, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 57, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/simple-type"}, char {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 73, :column 39, :end-line 73, :end-column 43, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/char", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/char, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 43, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/char"}, bind {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 70, :column 3, :end-line 70, :end-column 7, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/bind", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/bind, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 7, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/bind"}, symbol-ns {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 75, :column 50, :end-line 75, :end-column 59, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/symbol-ns", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/symbol-ns, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 59, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/symbol-ns"}, any {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 73, :column 13, :end-line 73, :end-column 16, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/any", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/any, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/any"}, cat {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 77, :column 7, :end-line 77, :end-column 10, :arglists (quote ([& gens])), :doc "Returns a generator of a sequence catenated from results of\ngens, each of which should generate something sequential.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(gens)], :arglists ([& gens]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/cat, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(gens)], :arglists ([& gens]), :arglists-meta (nil)}, :method-params [(gens)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 0, :fn-var true, :arglists ([& gens]), :doc "Returns a generator of a sequence catenated from results of\ngens, each of which should generate something sequential."}, LazyVar {:num-fields 2, :protocols #{cljs.core/IDeref}, :name cljs.spec.gen.alpha/LazyVar, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 17, :type true, :column 10, :line 16, :record false, :end-line 16, :skip-protocol-flag #{cljs.core/IDeref}}, double {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 73, :column 84, :end-line 73, :end-column 90, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/double", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/double, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 90, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/double"}, char-alpha {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 73, :column 44, :end-line 73, :end-column 54, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/char-alpha", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/char-alpha, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 54, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/char-alpha"}, generator? {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 44, :column 10, :end-line 44, :end-column 20, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec.gen.alpha/generator?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, int {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 74, :column 3, :end-line 74, :end-column 6, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/int", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/int, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 6, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/int"}, for-all*-ref {:name cljs.spec.gen.alpha/for-all*-ref, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 33, :column 1, :end-line 33, :end-column 28, :private true, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 33, :column 16, :end-line 33, :end-column 28, :private true}, :tag cljs.spec.gen.alpha/LazyVar}, ->LazyVar {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 16, :column 10, :end-line 16, :end-column 17, :protocols #{cljs.core/IDeref}, :skip-protocol-flag #{cljs.core/IDeref}, :factory :positional, :arglists (quote ([f cached]))}, :protocols #{cljs.core/IDeref}, :name cljs.spec.gen.alpha/->LazyVar, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 17, :method-params ([f cached]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f cached])), :skip-protocol-flag #{cljs.core/IDeref}}, return {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 70, :column 45, :end-line 70, :end-column 51, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/return", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/return, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 51, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/return"}, symbol {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 75, :column 43, :end-line 75, :end-column 49, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/symbol", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/symbol, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/symbol"}, quick-check {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 29, :column 7, :end-line 29, :end-column 18, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/quick-check, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, char-alphanumeric {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 73, :column 55, :end-line 73, :end-column 72, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/char-alphanumeric", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/char-alphanumeric, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 72, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/char-alphanumeric"}, choose {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 70, :column 8, :end-line 70, :end-column 14, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/choose", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/choose, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/choose"}, for-all* {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 36, :column 7, :end-line 36, :end-column 15, :arglists (quote ([& args])), :doc "Dynamically loaded clojure.test.check.properties/for-all*.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/for-all*, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Dynamically loaded clojure.test.check.properties/for-all*."}, string-ascii {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 75, :column 10, :end-line 75, :end-column 22, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/string-ascii", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/string-ascii, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/string-ascii"}, frequency {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 71, :column 26, :end-line 71, :end-column 35, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/frequency", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/frequency, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 35, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 71, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/frequency"}, double* {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 71, :column 18, :end-line 71, :end-column 25, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/double*", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/double*, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 71, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/double*"}, generate {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 50, :column 9, :end-line 50, :end-column 17, :arglists (quote ([generator])), :doc "Generate a single value using generator."}, :name cljs.spec.gen.alpha/generate, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 17, :method-params ([generator]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([generator])), :doc "Generate a single value using generator."}, delay-impl {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 55, :column 19, :end-line 55, :end-column 29, :skip-wiki true, :arglists (quote ([gfnd]))}, :name cljs.spec.gen.alpha/delay-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 29, :method-params ([gfnd]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gfnd]))}, gen-builtins {:name cljs.spec.gen.alpha/gen-builtins, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 86, :column 1, :end-line 87, :end-column 13, :private true, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 87, :column 1, :end-line 87, :end-column 13, :private true}, :tag cljs.core/Delay}, tuple {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 70, :column 32, :end-line 70, :end-column 37, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/tuple", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/tuple, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/tuple"}, string {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 75, :column 3, :end-line 75, :end-column 9, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/string", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/string, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/string"}, quick-check-ref {:name cljs.spec.gen.alpha/quick-check-ref, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 26, :column 1, :end-line 26, :end-column 31, :private true, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 26, :column 16, :end-line 26, :end-column 31, :private true}, :tag cljs.spec.gen.alpha/LazyVar}, vector {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 69, :column 51, :end-line 69, :end-column 57, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/vector", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/vector, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 57, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/vector"}, large-integer {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 74, :column 26, :end-line 74, :end-column 39, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/large-integer", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/large-integer, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 39, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/large-integer"}, keyword-ns {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 74, :column 15, :end-line 74, :end-column 25, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/keyword-ns", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/keyword-ns, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/keyword-ns"}, not-empty {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 69, :column 37, :end-line 69, :end-column 46, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/not-empty", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/not-empty, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 46, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/not-empty"}, elements {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 69, :column 79, :end-line 69, :end-column 87, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/elements", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/elements, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 87, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/elements"}, sample {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 70, :column 38, :end-line 70, :end-column 44, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/sample", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/sample, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 44, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/sample"}, list {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 69, :column 28, :end-line 69, :end-column 32, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/list", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/list, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/list"}, large-integer* {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 71, :column 3, :end-line 71, :end-column 17, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/large-integer*", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/large-integer*, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 71, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/large-integer*"}, keyword {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 74, :column 7, :end-line 74, :end-column 14, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/keyword", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/keyword, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/keyword"}, hash-map {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 69, :column 19, :end-line 69, :end-column 27, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/hash-map", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/hash-map, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/hash-map"}, ratio {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 74, :column 40, :end-line 74, :end-column 45, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/ratio", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/ratio, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 45, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/ratio"}, such-that {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 70, :column 22, :end-line 70, :end-column 31, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/such-that", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/such-that, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 70, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/such-that"}, fmap {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 69, :column 74, :end-line 69, :end-column 78, :arglists (quote ([& args])), :doc "Lazy loaded version of clojure.test.check.generators/fmap", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/fmap, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 78, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Lazy loaded version of clojure.test.check.generators/fmap"}, generator {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 47, :column 10, :end-line 47, :end-column 19, :private true, :arglists (quote ([gfn]))}, :private true, :name cljs.spec.gen.alpha/generator, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 19, :method-params ([gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gfn]))}, char-ascii {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 73, :column 73, :end-line 73, :end-column 83, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/char-ascii", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/char-ascii, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 83, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/char-ascii"}, simple-type-printable {:protocol-inline nil, :meta {:file "/Users/crs/Code/eunoia/causal-tree/resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :line 74, :column 58, :end-line 74, :end-column 79, :arglists (quote ([& args])), :doc "Fn returning clojure.test.check.generators/simple-type-printable", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.spec.gen.alpha/simple-type-printable, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/gen/alpha.cljs", :end-column 79, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 74, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Fn returning clojure.test.check.generators/simple-type-printable"}}, :cljs.spec/registry-ref [], :require-macros {c cljs.core, cljs.core cljs.core, gen cljs.spec.gen.alpha, cljs.spec.gen.alpha cljs.spec.gen.alpha}, :cljs.analyzer/constants {:seen #{clojure.test.check.generators/sample :min clojure.test.check.generators/hash-map clojure.test.check.generators/keyword clojure.test.check.generators/ratio clojure.test.check.generators/char-alpha clojure.test.check.generators/generator? clojure.test.check.generators/fmap clojure.test.check/quick-check clojure.test.check.generators/char-ascii :gen clojure.test.check.generators/char-alphanumeric cached clojure.test.check.generators/choose clojure.test.check.generators/frequency clojure.test.check.generators/generate clojure.test.check.generators/set clojure.test.check.generators/one-of clojure.test.check.generators/vector-distinct clojure.test.check.generators/map clojure.test.check.properties/for-all* clojure.test.check.generators/bind clojure.test.check.generators/symbol-ns clojure.test.check.generators/double clojure.test.check.generators/list clojure.test.check.generators/large-integer* :max clojure.test.check.generators/such-that clojure.test.check.generators/int clojure.test.check.generators/->Generator clojure.test.check.generators/return clojure.test.check.generators/simple-type-printable clojure.test.check.generators/symbol clojure.test.check.generators/uuid clojure.test.check.generators/string-ascii clojure.test.check.generators/any-printable clojure.test.check.generators/double* :mutable clojure.test.check.generators/boolean clojure.test.check.generators/string-alphanumeric clojure.test.check.generators/tuple clojure.test.check.generators/simple-type clojure.test.check.generators/string clojure.test.check.generators/vector clojure.test.check.generators/char clojure.test.check.generators/any clojure.test.check.generators/elements clojure.test.check.generators/not-empty clojure.test.check.generators/large-integer clojure.test.check.generators/keyword-ns f}, :order [f cached :mutable clojure.test.check/quick-check clojure.test.check.properties/for-all* clojure.test.check.generators/generator? clojure.test.check.generators/generate clojure.test.check.generators/->Generator :gen clojure.test.check.generators/hash-map clojure.test.check.generators/list clojure.test.check.generators/map clojure.test.check.generators/not-empty clojure.test.check.generators/set clojure.test.check.generators/vector clojure.test.check.generators/vector-distinct clojure.test.check.generators/fmap clojure.test.check.generators/elements clojure.test.check.generators/bind clojure.test.check.generators/choose clojure.test.check.generators/one-of clojure.test.check.generators/such-that clojure.test.check.generators/tuple clojure.test.check.generators/sample clojure.test.check.generators/return clojure.test.check.generators/large-integer* clojure.test.check.generators/double* clojure.test.check.generators/frequency clojure.test.check.generators/any clojure.test.check.generators/any-printable clojure.test.check.generators/boolean clojure.test.check.generators/char clojure.test.check.generators/char-alpha clojure.test.check.generators/char-alphanumeric clojure.test.check.generators/char-ascii clojure.test.check.generators/double clojure.test.check.generators/int clojure.test.check.generators/keyword clojure.test.check.generators/keyword-ns clojure.test.check.generators/large-integer clojure.test.check.generators/ratio clojure.test.check.generators/simple-type clojure.test.check.generators/simple-type-printable clojure.test.check.generators/string clojure.test.check.generators/string-ascii clojure.test.check.generators/string-alphanumeric clojure.test.check.generators/symbol clojure.test.check.generators/symbol-ns clojure.test.check.generators/uuid :max :min]}, :doc nil}